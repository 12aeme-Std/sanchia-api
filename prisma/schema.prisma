generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  lastname String
  email    String @unique
  password String

  accessToken String? @map("acccess_token")
  role        Roles   @default(CLIENT)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  cart Cart?

  orders             Order[]
  preOrders          PreOrder[]
  warehouseMovements WarehouseMovement[]

  @@map("user")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  price       Float
  stock       Int
  isAvailable Boolean  @default(true) @map("is_available")
  isNew       Boolean  @default(false) @map("is_new")
  endurance   String
  color       String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  productDimentions ProductDimentions?

  images           Image[]
  productsCarts    ProductsCarts[]
  productsOrders   ProductsOrders[]
  promosProducts   PromosProducts[]
  preorderProducts PreorderProducts[]

  @@map("product")
}

model ProductDimentions {
  id Int @id @default(autoincrement())

  length String?
  width  String?
  height String?
  weight String?

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @unique @map("product_id")

  @@map("product_dimentions")
}

model Image {
  id Int @id @default(autoincrement())

  url        String
  isCover    Boolean  @map("is_cover")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("image")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  @@map("category")
}

model Cart {
  id Int @id @default(autoincrement())

  productsCarts ProductsCarts[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("cart")
}

model Order {
  id           Int    @id @default(autoincrement())
  orderTracker String @default(uuid())
  total        Float  @default(0)
  store        String

  orderedAt DateTime @default(now()) @map("ordered_at")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  status OrderStatus

  productsOrders ProductsOrders[]

  promosOrders PromosOrders?

  @@map("order")
}

model PreOrder {
  id    Int   @id @default(autoincrement())
  total Float @default(0)

  orderedAt DateTime @default(now()) @map("ordered_at")

  user   User? @relation(fields: [userId], references: [id])
  userId Int   @map("user_id")

  preorderProducts PreorderProducts[]

  @@map("pre_order")
}

model Promo {
  id        Int       @id @default(autoincrement())
  name      String
  type      PromoType
  amount    Int
  isEnable  Boolean   @map("is_enable")
  applyTo   ApplyTo   @map("apply_to")
  startDate DateTime  @default(now()) @map("start_date")
  endDate   DateTime  @default(now()) @map("end_date")

  promosProducts PromosProducts?
  promoOrders    PromosOrders?

  @@map("promo")
}

model PreorderProducts {
  quantity Int

  preOrder   PreOrder @relation(fields: [preorderId], references: [id])
  preorderId Int      @map("preorder_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([preorderId, productId])
  @@map("preorders_products")
}

model ProductsCarts {
  quantity Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @map("cart_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([cartId, productId])
  @@map("products_carts")
}

model ProductsOrders {
  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([orderId, productId])
  @@map("products_orders")
}

model PromosProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  promo   Promo @relation(fields: [promoId], references: [id])
  promoId Int   @unique @map("promo_id")

  @@id([productId, promoId])
  @@map("promos_products")
}

model PromosOrders {
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique @map("order_id")

  promo   Promo @relation(fields: [promoId], references: [id])
  promoId Int   @unique @map("promo_id")

  @@id([orderId, promoId])
  @@map("promos_orders")
}

model Warehouse {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String       @db.Text
  type        WarehoseType @default(RAW_MATERIAL)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt() @map("updated_at")

  rawMaterials                  RawMaterial[]
  mixturesResults               MixtureResult[]
  warehouseMovementOrigins      WarehouseMovement[] @relation("origin")
  warehouseMovementDestinations WarehouseMovement[] @relation("destination")
  manufactureResult             ManufactureResult[]
  ProductionResults             ProductionResults[]

  @@map("warehouse")
}

model WarehouseMovement {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  registeredAt DateTime              @default(now()) @map("registered_at")
  type         WarehouseMovementType @default(WAREHOUSE_TO_WAREHOUSE)

  warehouseOrigin   Warehouse? @relation(fields: [warehouseOriginId], references: [id], name: "origin")
  warehouseOriginId Int?       @map("warehouse_origin_id")

  warehouseDestination   Warehouse? @relation(fields: [warehouseDestinationId], references: [id], name: "destination")
  warehouseDestinationId Int?       @map("warehouse_destination_id")

  mixtureResult   MixtureResult? @relation(fields: [mixtureResultId], references: [id])
  mixtureResultId Int?           @map("mixture_result_id")

  mixtureMachine   MixtureMachine? @relation(fields: [mixtureMachineId], references: [id])
  mixtureMachineId Int?            @map("mixture_machine_id")

  manufactureResult   ManufactureResult? @relation(fields: [manufactureResultId], references: [id])
  manufactureResultId Int?               @map("manufacture_result_id")

  manufactureMachine   ManufactureMachine? @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int?                @map("manufacture_machine_id")

  quantity Int

  mixture   Mixture? @relation(fields: [mixtureId], references: [id])
  mixtureId Int?     @map("mixture_id")

  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int?         @map("raw_material_id")

  @@map("warehouse_movement")
}

model MixtureMachine {
  id           Int      @id @default(autoincrement())
  registeredAt DateTime @default(now()) @map("registered_at")
  name         String   @unique

  movements WarehouseMovement[]
  mixtures  Mixture[]

  @@map("mixture_machine")
}

model ManufactureMachine {
  id           Int      @id @default(autoincrement())
  registeredAt DateTime @default(now()) @map("registered_at")
  name         String   @unique

  movements      WarehouseMovement[]
  manufactures   Manufacture[]
  PlanningSpec   PlanningSpec[]
  ProductionPlan ProductionPlan[]

  @@map("manufacture_machine")
}

model Mixture {
  id   Int    @id @default(autoincrement())
  name String @unique

  mixtureMachine   MixtureMachine @relation(fields: [mixtureMachineId], references: [id])
  mixtureMachineId Int            @map("mixture_machine_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int    @map("recipe_id")

  materials         RawMaterialOnMixture[]
  results           MixtureResult[]
  warehouseMovement WarehouseMovement[]

  @@map("mixture")
}

model RawMaterialOnMixture {
  mixture   Mixture @relation(fields: [mixtureId], references: [id], onDelete: Cascade)
  mixtureId Int     @map("mixture_id")

  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int         @map("raw_material_id")

  quantity Int

  @@id([mixtureId, rawMaterialId])
  @@map("mixture_material")
}

model MixtureResult {
  id Int @id @default(autoincrement())

  mixture   Mixture @relation(fields: [mixtureId], references: [id], onDelete: Cascade)
  mixtureId Int     @map("mixture_id")

  quantity   Int
  finishedAt DateTime @default(now()) @map("finished_at")

  manufactures ResourcesOnManufacture[]

  ResourceOnRecipe  ResourceOnRecipe[]
  Warehouse         Warehouse?          @relation(fields: [warehouseId], references: [id])
  warehouseId       Int?                @map("warehouse_id")
  WarehouseMovement WarehouseMovement[]

  @@map("mixture_result")
}

model Recipe {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  quantity    Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  mixtures Mixture[]

  resources ResourceOnRecipe[]

  parentId Int?
  parent   Recipe? @relation("RecipeVariants", fields: [parentId], references: [id])

  manufactureProduct   ManufactureProduct? @relation(fields: [manufactureProductId], references: [id])
  manufactureProductId Int?                @map("manufacture_product_id")

  variants Recipe[] @relation("RecipeVariants")

  type RecipeType @default(FINAL_PRODUCT)

  ProductionSpec ProductionSpec[]

  @@map("recipe")
}

model ResourceOnRecipe {
  id               Int   @id @default(autoincrement())
  requiredMaterial Float @default(0.0)

  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int?         @map("raw_material_id")

  mixtureResult   MixtureResult? @relation(fields: [mixtureResultId], references: [id])
  mixtureResultId Int?           @map("mixture_result_id")

  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?    @map("recipe_id")

  @@map("recipe_resources")
}

model RawMaterial {
  id               Int     @id @default(autoincrement())
  name             String  @unique
  stock            Int     @default(0)
  alternativeStock Int     @default(0)
  category         String?
  code             String?
  olimId           Int?    @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int       @map("warehouse_id")

  materialsOnMixtures    RawMaterialOnMixture[]
  movements              WarehouseMovement[]
  ResourceOnRecipe       ResourceOnRecipe[]
  ResourcesOnManufacture ResourcesOnManufacture[]

  @@map("raw_material")
}

model Manufacture {
  id   Int    @id @default(autoincrement())
  name String @unique

  manufactureMachine   ManufactureMachine @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int                @map("manufacture_machine_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  resources           ResourcesOnManufacture[]
  results             ManufactureResult[]
  manufactureProducts ManufactureProduct[]

  @@map("manufacture")
}

model ResourcesOnManufacture {
  id Int @id @default(autoincrement())

  manufacture   Manufacture @relation(fields: [manufactureId], references: [id])
  manufactureId Int         @map("manufacture_id")

  mixtureResult   MixtureResult? @relation(fields: [mixtureResultId], references: [id])
  mixtureResultId Int?           @map("mixture_id")

  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int?         @map("raw_material_id")

  quantity Int

  @@map("manufacture_resources")
}

model ManufactureResult {
  id Int @id @default(autoincrement())

  waste Int
  burr  Int

  finishedAt DateTime @default(now()) @map("finished_at")

  manufacture       Manufacture         @relation(fields: [manufactureId], references: [id])
  manufactureId     Int                 @map("manufacture_id")
  WarehouseMovement WarehouseMovement[]

  Warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId Int?       @map("warehouse_id")

  @@map("manufacture_result")
}

model ManufactureProduct {
  id            Int                    @id @default(autoincrement())
  name          String
  type          ManufactureProductType @default(PRODUCT)
  code          String?
  olimId        Int?                   @unique
  productWeight Int                    @default(0)

  manufacture    Manufacture?     @relation(fields: [manufactureId], references: [id])
  manufactureId  Int?             @map("manufacture_id ")
  ProductionSpec ProductionSpec[]
  Recipe         Recipe[]
  ProductionPlan ProductionPlan[]

  @@map("product_result")
}

//Plantifications
model Planning {
  id            Int            @id @default(autoincrement())
  code          String
  schedule      String
  status        PlanningStatus @default(value: INACTIVE)
  hasProduction Boolean        @default(false) @map("has_production")
  PlanningSpec  PlanningSpec[]

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  ProductionPlan ProductionPlan[]

  @@map("planning")
}

model PlanningSpec {
  id                 Int     @id @default(autoincrement())
  isMultipleSchedule Boolean @default(false) @map("is_multiple_schedule")

  supervisor   MachineManager? @relation(fields: [supervisorId], references: [id])
  supervisorId Int?            @map("supervisor_id")

  operators String? @map("operators")

  manufactureMachine   ManufactureMachine @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int                @map("manufacture_machine_id")

  planning   Planning @relation(fields: [planningId], references: [id])
  planningId Int      @map("planning_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  PlanningSchedule PlanningSchedule[]
  ProductionSpec   ProductionSpec[]

  @@map("planning_spec")
}

model PlanningSchedule {
  id             Int              @id @default(autoincrement())
  code           String
  duration       Int
  planningSpec   PlanningSpec     @relation(fields: [planningSpecId], references: [id])
  planningSpecId Int              @map("planning_spec_id")
  ProductionSpec ProductionSpec[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("planning_schedule")
}

model ProductionSpec {
  id                   Int @id @default(autoincrement())
  leisureTime          Int @map("leisure_time")
  cycles               Int
  productionEstimation Int @default(0) @map("production_estimation")

  manufactureProduct   ManufactureProduct? @relation(fields: [manufactureProductId], references: [id])
  manufactureProductId Int?                @map("manufacture_product_id")

  planningSchedule   PlanningSchedule? @relation(fields: [planningScheduleId], references: [id])
  planningScheduleId Int?              @map("planning_schedule_id")

  planningSpec   PlanningSpec? @relation(fields: [planningSpecId], references: [id])
  planningSpecId Int?          @map("planning_spec_id")

  recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId Int?    @map("recipe_id")

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  ProductionPlan ProductionPlan[]

  @@map("production_spec")
}

model MachineManager {
  id      Int                @id @default(autoincrement())
  name    String
  kind    MachineManagerType
  deleted Boolean            @default(false)

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt() @map("updated_at")
  PlanningSpec PlanningSpec[]

  @@map("machine_manager")
}

model ProductionPlan {
  id         Int     @id @default(autoincrement())
  isComplete Boolean @default(false) @map("is_complete")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  planning   Planning @relation(fields: [planningId], references: [id])
  planningId Int      @map("planning_id")

  manufactureProduct   ManufactureProduct? @relation(fields: [manufactureProductId], references: [id])
  manufactureProductId Int?                @map("manufacture_product_id")

  manufactureMachine   ManufactureMachine @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int                @map("manufacture_machine_id")

  productionSpec   ProductionSpec @relation(fields: [productionSpecId], references: [id])
  productionSpecId Int            @map("planning_spec_id")

  productionResults  ProductionResults[]
  ProductionIncident ProductionIncident[]

  @@map("production_plan")
}

model ProductionResults {
  id          Int                     @id @default(autoincrement())
  pieces      Int
  waste       Int?                    @default(0)
  burr        Int?                    @default(0)
  status      ProductionResultsStatus @default(value: PENDING)
  errorMesage String?                 @map("error_message")

  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int            @map("production_plan_id")

  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId Int?       @map("warehouse_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("production_results")
}

model ProductionIncident {
  id        Int       @id @default(autoincrement())
  comment   String
  startedAt DateTime?
  endedAt   DateTime?

  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("production_incident")
}

enum ProductionResultsStatus {
  PENDING
  SYNC
  ERROR

  @@map("production_results_status")
}

enum MachineManagerType {
  SUPERVISOR
  QUALITY
  OPERATOR
}

enum PlanningStatus {
  ACTIVE
  INACTIVE
  ON_HOLD
  DELETED

  @@map("planning_status")
}

enum OrderStatus {
  FINISHED
  PREPARING
  ROUTE
  CANCELLED
}

enum Roles {
  ADMIN
  SELLER
  SUPERVISOR
  PROVIDER
  CLIENT

  @@map("roles")
}

enum PromoType {
  PERCENTAGE
  MONEY

  @@map("promo_type")
}

enum ApplyTo {
  ORDER
  PRODUCT

  @@map("apply_to")
}

enum WarehouseMovementType {
  WAREHOUSE_TO_WAREHOUSE
  WAREHOUSE_TO_MIXTURE_MACHINE
  WAREHOUSE_TO_MANUFACTURE_MACHINE
  MIXTURE_RESULT_TO_WAREHOUSE
  MANUFACTURE_RESULT_TO_WAREHOUSE

  @@map("warehouse_movement_type")
}

enum WarehoseType {
  MIXTURE
  RAW_MATERIAL
  PRODUCTO
  ASSEMPLY_PRODUCT

  @@map("warehouse_type")
}

enum ManufactureStatus {
  PRODUCT
  SEMI_PRODUCT
  REFUSE
  REJECTED

  @@map("manufacture_status")
}

enum RecipeType {
  FINAL_PRODUCT
  ASSEMBLY_PRODUCT
  MIXTURE
  RAW_MATERIAL

  @@map("recipe_types")
}

enum ManufactureProductType {
  SEMI_PRODUCT
  PRODUCT
}
