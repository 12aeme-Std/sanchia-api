generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  lastname String
  email    String @unique
  password String

  accessToken String? @map("acccess_token")
  role        Roles   @default(SELLER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  carts              Cart[]
  orders             Order[]
  preOrders          PreOrder[]
  warehouseMovements WarehouseMovement[]

  @@map("user")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  price       Float
  stock       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  images           Image[]
  productsCarts    ProductsCarts[]
  productsOrders   ProductsOrders[]
  promosProducts   PromosProducts[]
  preorderProducts PreorderProducts[]

  @@map("product")
}

model Image {
  id Int @id @default(autoincrement())

  url        String
  isCover    Boolean  @map("is_cover")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("image")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]

  @@map("category")
}

model Cart {
  id Int @id @default(autoincrement())

  productsCarts ProductsCarts[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int   @map("user_id")

  @@map("cart")
}

model Order {
  id    Int   @id @default(autoincrement())
  total Float @default(0)

  orderedAt DateTime @default(now()) @map("ordered_at")

  user   User? @relation(fields: [userId], references: [id])
  userId Int   @map("user_id")

  productsOrders ProductsOrders[]

  promosOrders PromosOrders?

  @@map("order")
}

model PreOrder {
  id    Int   @id @default(autoincrement())
  total Float @default(0)

  orderedAt DateTime @default(now()) @map("ordered_at")

  user   User? @relation(fields: [userId], references: [id])
  userId Int   @map("user_id")

  preorderProducts PreorderProducts[]

  @@map("pre_order")
}

model Promo {
  id        Int       @id @default(autoincrement())
  name      String
  type      PromoType
  amount    Int
  isEnable  Boolean   @map("is_enable")
  applyTo   ApplyTo   @map("apply_to")
  startDate DateTime  @default(now()) @map("start_date")
  endDate   DateTime  @default(now()) @map("end_date")

  promosProducts PromosProducts?
  promoOrders    PromosOrders?

  @@map("promo")
}

model PreorderProducts {
  quantity Int

  preOrder   PreOrder @relation(fields: [preorderId], references: [id])
  preorderId Int      @map("preorder_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([preorderId, productId])
  @@map("preorders_products")
}

model ProductsCarts {
  quantity Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @map("cart_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([cartId, productId])
  @@map("products_carts")
}

model ProductsOrders {
  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@id([orderId, productId])
  @@map("products_orders")
}

model PromosProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  promo   Promo @relation(fields: [promoId], references: [id])
  promoId Int   @unique @map("promo_id")

  @@id([productId, promoId])
  @@map("promos_products")
}

model PromosOrders {
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int   @unique @map("order_id")

  promo   Promo @relation(fields: [promoId], references: [id])
  promoId Int   @unique @map("promo_id")

  @@id([orderId, promoId])
  @@map("promos_orders")
}

model Warehouse {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")

  rawMaterials                  RawMaterial[]
  warehouseMovementOrigins      WarehouseMovement[] @relation("origin")
  warehouseMovementDestinations WarehouseMovement[] @relation("destination")

  @@map("warehouse")
}

model WarehouseMovement {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  registeredAt DateTime      @default(now()) @map("registered_at")
  type         WarehouseType

  warehouseOrigin   Warehouse @relation(fields: [warehouseOriginId], references: [id], name: "origin")
  warehouseOriginId Int       @map("warehouse_origin_id")

  warehouseDestination   Warehouse? @relation(fields: [warehouseDestinationId], references: [id], name: "destination")
  warehouseDestinationId Int?        @map("warehouse_destination_id")

  mixtureMachine   MixtureMachine? @relation(fields: [mixtureMachineId], references: [id])
  mixtureMachineId Int?             @map("mixture_machine_id")

  manufactureMachine   ManufactureMachine? @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int?                 @map("manufacture_machine_id")

  quantity Int

  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int         @map("raw_material_id")

  @@map("warehouse_movement")
}

model MixtureMachine {
  id           Int      @id @default(autoincrement())
  registeredAt DateTime @default(now()) @map("registered_at")
  name         String   @unique

  movements WarehouseMovement[]
  mixtures  Mixture[]

  @@map("mixture_machine")
}

model ManufactureMachine {
  id           Int      @id @default(autoincrement())
  registeredAt DateTime @default(now()) @map("registered_at")
  name         String   @unique

  movements    WarehouseMovement[]
  manufactures Manufacture[]

  @@map("manufacture_machine")
}

model Mixture {
  id   Int    @id @default(autoincrement())
  name String @unique

  mixtureMachine   MixtureMachine @relation(fields: [mixtureMachineId], references: [id])
  mixtureMachineId Int            @map("mixture_machine_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int    @map("recipe_id")

  materials    RawMaterialOnMixture[]
  results      MixtureResult[]
  manufactures ResourcesOnManufacture[]

  @@map("mixture")
}

model RawMaterialOnMixture {
  mixture   Mixture @relation(fields: [mixtureId], references: [id])
  mixtureId Int     @map("mixture_id")

  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int         @map("raw_material_id")

  quantity Int

  @@id([mixtureId, rawMaterialId])
  @@map("mixture_material")
}

model MixtureResult {
  id Int @id @default(autoincrement())

  mixture   Mixture @relation(fields: [mixtureId], references: [id])
  mixtureId Int     @map("mixture_id")

  quantity   Int
  finishedAt DateTime @default(now()) @map("finished_at")

  @@map("mixture_result")
}

model Recipe {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  quantity    Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  mixtures  Mixture[]
  materials RawMaterialOnRecipe[]

  @@map("recipe")
}

model RawMaterialOnRecipe {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int    @map("recipe_id")

  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int         @map("raw_material_id")

  quantity Int

  @@id([recipeId, rawMaterialId])
  @@map("recipe_material")
}

model RawMaterial {
  id    Int             @id @default(autoincrement())
  name  String          @unique
  stock Int             @default(0)
  type  RawMaterialType @default(RAW)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int       @map("warehouse_id")

  recipes             RawMaterialOnRecipe[]
  materialsOnMixtures RawMaterialOnMixture[]
  manufactures        ResourcesOnManufacture[]
  movements           WarehouseMovement[]

  @@map("raw_material")
}

model Manufacture {
  id   Int    @id @default(autoincrement())
  name String @unique

  manufactureMachine   ManufactureMachine @relation(fields: [manufactureMachineId], references: [id])
  manufactureMachineId Int                @map("manufacture_machine_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  resources ResourcesOnManufacture[]
  results   ManufactureResult[]

  @@map("manufacture")
}

model ResourcesOnManufacture {
  id Int @id @default(autoincrement())

  manufacture   Manufacture @relation(fields: [manufactureId], references: [id])
  manufactureId Int         @map("manufacture_id")

  mixture   Mixture? @relation(fields: [mixtureId], references: [id])
  mixtureId Int      @map("mixture_id")

  rawMaterial   RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId Int          @map("raw_material_id")

  quantity Int

  @@map("manufacture_resources")
}

model ManufactureResult {
  id Int @id @default(autoincrement())

  manufacture   Manufacture @relation(fields: [manufactureId], references: [id])
  manufactureId Int         @map("manufacture_id")

  quantity   Int
  finishedAt DateTime @default(now()) @map("finished_at")

  @@map("manufacture_result")
}

enum Roles {
  ADMIN
  SELLER
  SUPERVISOR
  PROVIDER
  CLIENT

  @@map("roles")
}

enum PromoType {
  PERCENTAGE
  MONEY

  @@map("promo_type")
}

enum ApplyTo {
  ORDER
  PRODUCT

  @@map("apply_to")
}

enum WarehouseType {
  WAREHOUSE_TO_MACHINE
  MIXTURE_TO_MACHINE

  @@map("warehouse_type")
}

enum RawMaterialType {
  PRODUCT
  RAW

  @@map("raw_materials")
}

enum ManufactureStatus {
  PRODUCT
  PRODUCTION
  REFUSE
  REJECTED

  @@map("manufacture_status")
}
